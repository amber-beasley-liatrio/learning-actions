name: Build
on:
  push:
    branches:
      - "**"

jobs:

  anchore-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan current project
        uses: anchore/scan-action@v3
        id: anchore-scan
        with:
          path: "."
          output-format: "json"
          fail-build: "false"
    
      - name: Upload Anchore results as artifact
        uses: actions/upload-artifact@v3
        with:
          name: anchore-scan-results
          path: results.json

    # Read and process the `results.json` file
      - name: Generate Predicate JSON
        run: |
          # Load values from results.json
          SCANNER_URI=$(jq -r '.descriptor.name' results.json)
          SCANNER_VERSION=$(jq -r '.descriptor.version' results.json)
          DB_URI=$(jq -r '.descriptor.configuration.db."update-url"' results.json)
          DB_VERSION=$(jq -r '.descriptor.db.schemaVersion' results.json)
          DB_LAST_UPDATE=$(jq -r '.descriptor.db.built' results.json)
          SCAN_STARTED_ON=$(jq -r '.descriptor.db.built' results.json)
          SCAN_FINISHED_ON=$(jq -r '.descriptor.timestamp' results.json)

          echo $SCANNER_URI
          echo $SCANNER_VERSION
          echo $DB_URI
          echo $DB_VERSION
          echo $DB_LAST_UPDATE
          echo $SCAN_STARTED_ON
          echo $SCAN_FINISHED_ON

          # Collect vulnerabilities
          jq -n --arg scannerUri "$SCANNER_URI" \
                --arg scannerVersion "$SCANNER_VERSION" \
                --arg dbUri "$DB_URI" \
                --arg dbVersion "$DB_VERSION" \
                --arg dbLastUpdate "$DB_LAST_UPDATE" \
                --arg scanStartedOn "$SCAN_STARTED_ON" \
                --arg scanFinishedOn "$SCAN_FINISHED_ON" \
                --argjson results "$(jq '[.matches[] | {
                  vulnerability: {
                    id: .vulnerability.id,
                    severity: [{
                      method: "cvss",
                      score: (.vulnerability.cvss[0].metrics.baseScore | tostring)
                    }]
                  }
                }]' results.json)" \
                '{
                  scanner: {
                    uri: $scannerUri,
                    version: $scannerVersion,
                    db: {
                      uri: $dbUri,
                      version: $dbVersion,
                      lastUpdate: $dbLastUpdate
                    },
                    result: $results
                  },
                  metadata: {
                    scanStartedOn: $scanStartedOn,
                    scanFinishedOn: $scanFinishedOn
                  }
                }' > predicate.json

      # Upload the output file as an artifact
      - name: Upload Predicate JSON
        uses: actions/upload-artifact@v3
        with:
          name: predicate
          path: predicate.json         
  

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create evaluation-results.json
        run: echo "{}" > evaluation-results.json

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: evaluation-results
          path: evaluation-results.json

  go-semantic-release:
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: evaluation-results

      - uses: octo-sts/action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0
        id: octo-sts
        with:
          # can only run on main branch
          scope: amber-beasley-liatrio/learning-actions
          identity: semantic-release

      - name: Run go-semantic-release
        id: go-semantic-release
        uses: go-semantic-release/action@v1
        with:
          github-token: ${{ steps.octo-sts.outputs.token }}
          changelog-generator-opt: emojis=true
          allow-initial-development-versions: true

      - name: Upload Results/Sigstore Bundle as Release Asset
        if: steps.go-semantic-release.outputs.version != ''
        uses: softprops/action-gh-release@01570a1f39cb168c169c802c3bceb9e93fb10974 # v2.1.0
        with:
          files: evaluation-results.json
          tag_name: v${{ steps.go-semantic-release.outputs.version }}
          token: ${{ steps.octo-sts.outputs.token }}
