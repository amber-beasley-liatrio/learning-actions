name: "Release and Deploy"
on:
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"


env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  IMAGE_PATH: ${{ github.repository }}

permissions:
  id-token: write
  contents: write
  packages: write

jobs:
  Semantic-release-dry-run:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.new_release_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Semantic Release Dry Run
        id: release
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: true

      - name: Do something when a new release published
        run: |
          echo ${{ steps.release.outputs.new_release_published }}
          echo ${{ steps.release.outputs.new_release_version }}
          echo ${{ steps.release.outputs.new_release_major_version }}
          echo ${{ steps.release.outputs.new_release_minor_version }}
          echo ${{ steps.release.outputs.new_release_patch_version }}

  Update-version-py:
    runs-on: ubuntu-latest
    needs: Semantic-release-dry-run

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Update version.py
        run: |
          TAG=$(echo "${{ needs.Semantic-release-dry-run.outputs.version }}")
          sed -i "s/__version__ = .*/__version__ = '${TAG:1}'/" version.py
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Update version to $TAG"
          git push

  Docker-build:
    name: Build and Push Short Sha Image
    needs: Update-version-py
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate tag
        id: tag
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME:${{ steps.tag.outputs.sha_short }} --label "runnumber=${GITHUB_RUN_ID}"

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: docker push $IMAGE_NAME:${{ steps.tag.outputs.sha_short }}
    outputs:
      docker_tag: ${{ steps.tag.outputs.sha_short }}

  Semantic-release:
    name: Semantic Release
    needs: Docker-build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic   # Need an `id` for output variables
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    
      - name: Do something when a new release published
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo ${{ steps.semantic.outputs.new_release_published }}
          echo ${{ steps.semantic.outputs.new_release_version }}
          echo ${{ steps.semantic.outputs.new_release_major_version }}
          echo ${{ steps.semantic.outputs.new_release_minor_version }}
          echo ${{ steps.semantic.outputs.new_release_patch_version }}
    outputs:
      release-version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}

  Docker-tag:
    runs-on: ubuntu-latest
    needs: [Semantic-release, Docker-build]
    if: needs.Semantic-release.outputs.new_release_published == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Semantic Version Tag image
        run: |
          docker pull $IMAGE_NAME:${{ needs.Docker-build.outputs.docker_tag }}
          docker image tag $IMAGE_NAME:${{ needs.Docker-build.outputs.docker_tag }} $IMAGE_NAME:v${{ needs.Semantic-release.outputs.release-version }}
          docker image tag $IMAGE_NAME:${{ needs.Docker-build.outputs.docker_tag }} $IMAGE_NAME:latest
          docker push $IMAGE_NAME:v${{ needs.Semantic-release.outputs.release-version }}
          docker push $IMAGE_NAME:latest
